{
	"info": {
		"_postman_id": "bb350d87-c294-4fff-b50b-87aeeb65f59d",
		"name": "API Testing_CapstoneProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39843655",
		"_collection_link": "https://lively-astronaut-250751.postman.co/workspace/25441188-214d-48e8-9404-95ee882aa8fc/collection/39843655-bb350d87-c294-4fff-b50b-87aeeb65f59d?action=share&source=collection_link&creator=39843655"
	},
	"item": [
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TC1:Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"TC2:Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"TC3:Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"pm.test(\"TC4:Each product has id, title, price\", function () {\r",
							"  const products = pm.response.json();\r",
							"  products.forEach(product => {\r",
							"    pm.expect(product).to.have.property('id');\r",
							"    pm.expect(product).to.have.property('title');\r",
							"    pm.expect(product).to.have.property('price');\r",
							"  });\r",
							"});\r",
							"pm.globals.set(\"ProductID\", \"1\");\r",
							" \r",
							" \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a new product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TC1: Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"TC2: Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TC3: Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"clothing\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TC4: Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TC5: Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"if (responseData.id) {\r",
							"    pm.globals.set(\"IDa\", responseData.id);\r",
							"    console.log(\"Saved IDa:\", responseData.id);\r",
							"} else {\r",
							"    console.warn(\"No 'id' found in response to set as global variable.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Red Shirt\",\r\n  \"price\": 25.99,\r\n  \"category\": \"clothing\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products by variable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TC1:Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"TC2:Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"TC3:Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/products/{{IDa}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						"{{IDa}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products by json path",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TC1:Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"TC2:Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"TC3:Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/products/{{ProductID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						"{{ProductID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TC1: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"TC2: Product title updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.title).to.eql(\"Yellow Shirt\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Yellow Shirt\",\r\n  \"price\": 25.99,\r\n  \"category\": \"clothing\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/products/{{IDa}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						"{{IDa}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TC1: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"TC2: Product title updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.price).to.eql(2003);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"price\": 2003\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/products/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TC1:Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"TC2:Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"TC3:Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/products/a5cd",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						"a5cd"
					]
				}
			},
			"response": []
		}
	]
}